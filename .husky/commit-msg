# .husky/commit-msg

# ‚úÖ Regras obrigat√≥rias:
# - tipo(escopo): descri√ß√£o
# - tipo = palavra em min√∫sculas
# - escopo = uma ou mais palavras em min√∫sculas/separadas por h√≠fen, separadas por v√≠rgula (sem v√≠rgulas no final, nem escopos vazios)
# - dois-pontos sem espa√ßo antes e com um espa√ßo depois
# - descri√ß√£o come√ßa em min√∫scula e n√£o termina com ponto final
REGEX="^[a-z]+\\(([a-z0-9-]+)(,[a-z0-9-]+)*\\):\s[a-z][^\\.]*$"

# Obt√©m a mensagem de commit atual
current_commit_msg=$(cat "$1")

# Obt√©m a mensagem de commit anterior
previous_commit_msg=$(git log -1 --pretty=%B)

# Verifica se j√° existe pelo menos um commit
if git rev-parse --verify HEAD >/dev/null 2>&1; then
  # Obt√©m a mensagem do commit anterior
  previous_commit_msg=$(git log -1 --pretty=%B)

  # Verifica se a mensagem atual √© igual √† anterior
  if [ "$current_commit_msg" = "$previous_commit_msg" ]; then
    echo "‚ùå A mensagem de commit √© igual √† anterior."
    echo "üí° Por favor, altere a mensagem de commit antes de confirmar."
    exit 1
  fi
else
  echo "‚ÑπÔ∏è Nenhum commit anterior encontrado (primeiro commit). Ignorando verifica√ß√£o de duplicidade."
fi


# Verifica o formato da mensagem de commit usando a express√£o regular
if ! grep -qE "$REGEX" "$1"; then
  echo "‚ùå Formato de mensagem de commit inv√°lido."
  echo "üí° Esperado: tipo(escopo): descri√ß√£o"
  echo "üîí Regras:"
  echo "   - tipo e escopo devem estar em min√∫sculas"
  echo "   - escopo permite h√≠fens e m√∫ltiplos escopos separados por v√≠rgulas (sem v√≠rgulas no final)"
  echo "   - sem espa√ßo antes dos dois-pontos, exatamente um espa√ßo depois"
  echo "   - descri√ß√£o come√ßa em min√∫scula e n√£o termina com ponto final (ou seja, '.')"
  exit 1
fi

# Executa o commitlint
npx --no-install commitlint --edit "$1"
